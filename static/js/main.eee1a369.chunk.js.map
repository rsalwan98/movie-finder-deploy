{"version":3,"sources":["Components/MovieInput/MovieInput.module.css","Components/PopUp/PopUp.module.css","Components/MovieDisplayBox/MovieDisplayBox.module.css","Components/MovieDisplayBox/MovieTile/MovieTile.module.css","Components/UI/Modal/Modal.module.css","Components/UI/Backdrop/Backdrop.module.css","hoc/Auxiliary.js","store/actions.js","Components/MovieInput/MovieInput.js","Components/MovieDisplayBox/MovieTile/MovieTile.js","Components/UI/Backdrop/Backdrop.js","Components/UI/Modal/Modal.js","Components/PopUp/PopUp.js","Components/MovieDisplayBox/MovieDisplayBox.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","auxiliary","props","children","setMoviesData","movieData","type","setFetchedData","console","log","data","MovieInput","state","movieName","movieNameInputHandler","event","updatedState","target","value","setState","onSubmitHandler","preventDefault","onSubmit","className","classes","TextBox","onChange","this","placeholder","SubmitButton","Component","connect","dispatch","axios","get","then","res","Search","Actions","movieTile","onClick","clicked","id","MovieTile","Poster","src","imgSource","alt","title","backdrop","show","Backdrop","modal","closeModal","Modal","style","transform","opacity","popUp","MovieImage","MovieInfo","year","plot","MovieDisplayBox","testing","map","movie","Title","key","imdbID","onTileClick","pop","popUpData","PopUp","Year","Plot","showPopUp","onBackDropClick","MovieBox","fetchedData","movieId","App","Boolean","window","location","hostname","match","intialState","reducer","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,QAAU,4BAA4B,aAAe,mC,mBCAnHD,EAAOC,QAAU,CAAC,WAAa,0BAA0B,UAAY,yBAAyB,MAAQ,uB,mBCAtGD,EAAOC,QAAU,CAAC,gBAAkB,yCAAyC,SAAW,oC,mBCAxFD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,OAAS,4B,mBCApED,EAAOC,QAAU,CAAC,MAAQ,uB,mBCA1BD,EAAOC,QAAU,CAAC,SAAW,6B,6LCCdC,G,MAFG,SAACC,GAAD,OAAWA,EAAMC,W,gDCW7BC,EAAgB,SAACC,GACnB,MAAO,CACHC,KAAO,eACPD,UAAWA,IAabE,EAAiB,SAACF,GAEpB,OADAG,QAAQC,IAAIJ,GACL,CACHC,KAAO,iBACPI,KAAOL,IC3BTM,E,4MACFC,MAAO,CACHC,UAAY,I,EAGhBC,sBAAwB,SAACC,GACrB,IAAIC,EAAY,eACT,EAAKJ,MAAMC,WAElBG,EAAeD,EAAME,OAAOC,MAC5B,EAAKC,SAAS,CAACN,UAAYG,K,EAG/BI,gBAAiB,SAACL,GACdA,EAAMM,iBACN,EAAKnB,MAAMoB,SAAS,EAAKV,MAAMC,Y,uDAG1B,IAAD,OACJ,OACI,yBAAKU,UAAWC,IAAQb,YACpB,0BAAMW,SAAU,SAACP,GAAD,OAAW,EAAKK,gBAAgBL,KAC5C,2BAAOQ,UAAWC,IAAQC,QAASC,SAAU,SAACX,GAAD,OAAW,EAAKD,sBAAsBC,IAAQG,MAAOS,KAAKf,MAAMC,UAAWP,KAAK,OAAOsB,YAAY,eAChJ,4BAAQL,UAAWC,IAAQK,cAA3B,gB,GAvBKC,aAmCVC,cAAQ,MALI,SAAAC,GACvB,MAAO,CACHV,SAAW,SAACT,GAAD,OAAemB,EDlCH,SAACnB,GAC5B,OAAO,SAAAmB,GACHC,IAAMC,IAAI,6CAA6CrB,GACtDsB,MAAK,SAAAC,GACFJ,EAAS5B,EAAcgC,EAAI1B,KAAK2B,aC8BDC,CAAwBzB,QAGpDkB,CAAiCpB,G,kCC5BjC4B,EATG,SAACrC,GACf,OACI,yBAAKsC,QAAS,kBAAKtC,EAAMuC,QAAQvC,EAAMwC,KAAKnB,UAAWC,IAAQmB,WAC3D,yBAAKpB,UAAWC,IAAQoB,OAAQC,IAAK3C,EAAM4C,UAAWC,IAAK7C,EAAM8C,QACjE,2BAAI9C,EAAM8C,S,kCCCPC,EALE,SAAC/C,GAAD,OAEbA,EAAMgD,KAAO,yBAAK3B,UAAWC,IAAQ2B,SAAUX,QAAStC,EAAMuC,UAAkB,MCiBrEW,EAhBD,SAAClD,GACX,OACI,kBAAC,EAAD,KACI,kBAACiD,EAAD,CAAUD,KAAMhD,EAAMgD,KAAMT,QAASvC,EAAMmD,aAC3C,yBAAK9B,UAAWC,IAAQ8B,MACpBC,MAAO,CACHC,UAAWtD,EAAMgD,KAAO,gBAAgB,qBACxCO,QAASvD,EAAMgD,KAAO,IAAI,MAG7BhD,EAAMC,Y,iBCCRuD,EAdD,SAACxD,GAEX,OACI,yBAAKqB,UAAWC,IAAQkC,OACpB,yBAAKnC,UAAWC,IAAQmC,WAAYd,IAAK3C,EAAM4C,UAAWC,IAAK7C,EAAM8C,QACrE,yBAAKzB,UAAWC,IAAQoC,WACpB,2BAAG,0CAAwB1D,EAAM8C,OACjC,2BAAG,oDAAkC9C,EAAM2D,MAC3C,2BAAG,yCAAuB3D,EAAM4D,SCF1CC,E,uKAEO,IAAD,OACAC,EAAU,KACXrC,KAAKzB,MAAMG,YACV2D,EAAUrC,KAAKzB,MAAMG,UAAU4D,KAAI,SAAAC,GAC/B,OACI,kBAACvB,EAAD,CACIK,MAAOkB,EAAMC,MACbC,IAAKF,EAAMG,OACXvB,UAAWoB,EAAMtB,OACjBF,GAAIwB,EAAMG,OACV5B,QAAS,SAACC,GAAD,OAAQ,EAAKxC,MAAMoE,YAAY5B,UAMxD,IAAI6B,EAAI,KAWR,OAVG5C,KAAKzB,MAAMsE,YACVD,EACI,kBAACE,EAAD,CACI3B,UAAWnB,KAAKzB,MAAMsE,UAAU5B,OAChCI,MAAOrB,KAAKzB,MAAMsE,UAAUL,MAC5BN,KAAMlC,KAAKzB,MAAMsE,UAAUE,KAC3BZ,KAAMnC,KAAKzB,MAAMsE,UAAUG,QAKnC,kBAAC,EAAD,KACI,kBAACrB,EAAD,CAAOJ,KAAMvB,KAAKzB,MAAM0E,UAAWvB,WAAY1B,KAAKzB,MAAM2E,iBACrDN,GAEL,yBAAKhD,UAAWC,IAAQuC,iBACpB,yBAAKxC,UAAWC,IAAQsD,UACnBd,S,GApCKlC,aA4DfC,eAfS,SAAAnB,GACpB,MAAO,CACHP,UAAYO,EAAMP,UAClBuE,UAAYhE,EAAMgE,UAClBJ,UAAY5D,EAAMmE,gBAIC,SAAA/C,GACvB,MAAO,CACHsC,YAAa,SAAC5B,GAAD,OAASV,GN7CCgD,EM6C+BtC,EN5CnD,SAAAV,GACHC,IAAMC,IAAI,6CAA6C8C,GACtD7C,MAAK,SAAAC,GACFJ,EAASzB,EAAe6B,EAAI1B,aAJV,IAACsE,GM8CvBH,gBAAkB,kBAAM7C,EAAS,CAAC1B,KAAO,kBAIlCyB,CAA4CgC,GClD5CkB,E,uKAXX,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANQnD,aCOEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WClBAC,EAAa,CACflF,UAAY,KACZuE,WAAY,EACZG,YAAc,MAgCHS,EA7BC,WAAiC,IAAhC5E,EAA+B,uDAAvB2E,EAAYE,EAAW,uCAE5C,OAAOA,EAAOnF,MACV,IAAK,eACD,OAAO,2BACAM,GADP,IAEIP,UAAYoF,EAAOpF,YAE3B,IAAK,YACD,OAAO,2BACAO,GADP,IAEIgE,WAAW,IAEnB,IAAK,YACD,kCACOhE,GADP,IAEIgE,WAAU,IAElB,IAAK,iBACD,kCACOhE,GADP,IAEImE,YAAcU,EAAO/E,KACrBkE,WAAU,IAElB,QACI,OAAOhE,I,QCrBb8E,EAAmBP,OAAOQ,sCAAwCC,IAElEC,EAAQC,YAAYN,EAAQE,EAChCK,YAAgBC,OAGlBC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAGFM,SAASC,eAAe,SF8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpE,MAAK,SAAAqE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnG,QAAQmG,MAAMA,EAAMC,c","file":"static/js/main.eee1a369.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieInput\":\"MovieInput_MovieInput__19jJR\",\"TextBox\":\"MovieInput_TextBox__3dQUP\",\"SubmitButton\":\"MovieInput_SubmitButton__1NM4x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieImage\":\"PopUp_MovieImage__3AtN8\",\"MovieInfo\":\"PopUp_MovieInfo__PyiwV\",\"popUp\":\"PopUp_popUp__2KxfP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieDisplayBox\":\"MovieDisplayBox_MovieDisplayBox__28dQu\",\"MovieBox\":\"MovieDisplayBox_MovieBox__dPor4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieTile\":\"MovieTile_MovieTile__2bUaW\",\"Poster\":\"MovieTile_Poster__2TReU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__3ge8x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__r25Np\"};","const auxiliary = (props) => props.children\r\n\r\nexport default auxiliary;","import axios from 'axios'\r\n\r\nexport const fetchMoviesData = (movieName) => {\r\n    return dispatch => {\r\n        axios.get(\"http://www.omdbapi.com/?apikey=fc1d8613&s=\"+movieName)\r\n        .then(res => {\r\n            dispatch(setMoviesData(res.data.Search))\r\n        })\r\n    }\r\n}\r\n\r\nconst setMoviesData = (movieData) => {\r\n    return {\r\n        type : \"SETMOVIEDATA\",\r\n        movieData: movieData\r\n    }\r\n}\r\n\r\nexport const fetchMovieData = (movieId) => {\r\n    return dispatch => {\r\n        axios.get(\"http://www.omdbapi.com/?apikey=fc1d8613&i=\"+movieId)\r\n        .then(res => {\r\n            dispatch(setFetchedData(res.data))\r\n        })\r\n    }\r\n}\r\n\r\nconst setFetchedData = (movieData) => {\r\n    console.log(movieData)\r\n    return {\r\n        type : \"SETFETCHEDDATA\",\r\n        data : movieData\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport classes from './MovieInput.module.css'\r\nimport * as Actions from '../../store/actions'\r\nclass MovieInput extends Component {\r\n    state ={\r\n        movieName : \"\"\r\n    }\r\n\r\n    movieNameInputHandler = (event) => {\r\n        let updatedState ={\r\n            ...this.state.movieName\r\n        }\r\n        updatedState = event.target.value;\r\n        this.setState({movieName : updatedState});\r\n    }\r\n\r\n    onSubmitHandler =(event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state.movieName)\r\n    }\r\n \r\n    render(){\r\n        return (\r\n            <div className={classes.MovieInput}>\r\n                <form onSubmit={(event) => this.onSubmitHandler(event)}>\r\n                    <input className={classes.TextBox} onChange={(event) => this.movieNameInputHandler(event)} value={this.state.movieName} type=\"text\" placeholder=\"Movie Name\"></input>\r\n                    <button className={classes.SubmitButton}>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSubmit : (movieName) => dispatch(Actions.fetchMoviesData(movieName))\r\n    }\r\n}\r\nexport default connect(null,mapDispatchToProps)(MovieInput);","import React from 'react'\r\nimport classes from './MovieTile.module.css'\r\nconst movieTile = (props) =>{\r\n    return (\r\n        <div onClick={() =>props.clicked(props.id)} className={classes.MovieTile}>\r\n            <img className={classes.Poster} src={props.imgSource} alt={props.title}></img>\r\n            <p>{props.title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default movieTile;","import React from 'react'\r\nimport classes from './Backdrop.module.css'\r\nconst backdrop = (props) =>(\r\n\r\n    props.show ? <div className={classes.Backdrop} onClick={props.clicked}></div> : null   \r\n)\r\n\r\nexport default backdrop;","import React from 'react'\r\nimport classes from './Modal.module.css'\r\nimport Aux from '../../../hoc/Auxiliary'\r\nimport Backdrop from '../Backdrop/Backdrop'\r\n\r\nconst modal = (props) => {\r\n    return (\r\n        <Aux>\r\n            <Backdrop show={props.show} clicked={props.closeModal}/>\r\n            <div className={classes.Modal}\r\n                style={{\r\n                    transform: props.show ? 'translateY(0)':'translateY(-100vh)',\r\n                    opacity: props.show ? '1':'0'\r\n                }}\r\n            >\r\n                {props.children}\r\n            </div>\r\n        </Aux>\r\n    )\r\n}\r\n\r\nexport default modal","import React  from 'react'\r\nimport classes from './PopUp.module.css'\r\nconst popUp = (props) => {\r\n\r\n    return (\r\n        <div className={classes.popUp}>\r\n            <img className={classes.MovieImage} src={props.imgSource} alt={props.title}></img>\r\n            <div className={classes.MovieInfo}>\r\n                <p><strong>Title:</strong>{props.title}</p>\r\n                <p><strong>Year of Release:</strong>{props.year}</p>\r\n                <p><strong>Plot:</strong>{props.plot}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default popUp;","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport classes from './MovieDisplayBox.module.css'\r\nimport MovieTile from './MovieTile/MovieTile'\r\nimport Modal from '../UI/Modal/Modal'\r\nimport Aux from '../../hoc/Auxiliary'\r\nimport PopUp from '../PopUp/PopUp'\r\nimport * as Actions from '../../store/actions'\r\nclass MovieDisplayBox extends Component {\r\n    \r\n    render(){\r\n        let testing = null;\r\n        if(this.props.movieData){\r\n            testing = this.props.movieData.map(movie => {\r\n                return (\r\n                    <MovieTile\r\n                        title={movie.Title}\r\n                        key={movie.imdbID}\r\n                        imgSource={movie.Poster}\r\n                        id={movie.imdbID}\r\n                        clicked={(id) => this.props.onTileClick(id)}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n\r\n        let pop=null;\r\n        if(this.props.popUpData){\r\n            pop=(\r\n                <PopUp\r\n                    imgSource={this.props.popUpData.Poster}\r\n                    title={this.props.popUpData.Title}\r\n                    year={this.props.popUpData.Year}\r\n                    plot={this.props.popUpData.Plot}\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            <Aux>\r\n                <Modal show={this.props.showPopUp} closeModal={this.props.onBackDropClick}>\r\n                    {pop}\r\n                </Modal>\r\n                <div className={classes.MovieDisplayBox}>\r\n                    <div className={classes.MovieBox}>\r\n                        {testing}\r\n                    </div>\r\n                </div>\r\n            </Aux>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        movieData : state.movieData,\r\n        showPopUp : state.showPopUp,\r\n        popUpData : state.fetchedData\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onTileClick :(id) =>  dispatch(Actions.fetchMovieData(id)),\r\n        onBackDropClick : () => dispatch({type : \"HIDEPOPUP\"})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MovieDisplayBox);","import React, { Component } from 'react';\nimport './App.css';\nimport Aux from './hoc/Auxiliary';\nimport MovieInput from './Components/MovieInput/MovieInput'\nimport MovieDisplayBox  from './Components/MovieDisplayBox/MovieDisplayBox'\nclass App extends Component {\n  render(){\n    return (\n      <div>\n        <Aux>\n          <MovieInput/>\n          <MovieDisplayBox/>\n        </Aux>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const intialState ={\r\n    movieData : null,\r\n    showPopUp : false,\r\n    fetchedData : null\r\n}\r\n\r\nconst reducer = (state = intialState,action) => {\r\n\r\n    switch(action.type){\r\n        case \"SETMOVIEDATA\":\r\n            return {\r\n                ...state,\r\n                movieData : action.movieData\r\n            }\r\n        case \"SHOWPOPUP\":\r\n            return {\r\n                ...state,\r\n                showPopUp: true\r\n            }  \r\n        case \"HIDEPOPUP\":\r\n            return{\r\n                ...state,\r\n                showPopUp:false\r\n            }  \r\n        case \"SETFETCHEDDATA\":\r\n            return{\r\n                ...state,\r\n                fetchedData : action.data,\r\n                showPopUp:true\r\n            }     \r\n        default :\r\n            return state    \r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore , applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux' \nimport reducer from \"./store/reducer\"\nimport thunk from 'redux-thunk'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer,composeEnhancers(\n  applyMiddleware(thunk)\n));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}